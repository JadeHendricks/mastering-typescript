What is typescript?
- Typescript is built on top of Javascript with the purpose of avoiding the common pitfalls and bugs that arise from javascript.
- It does that by adding types to Javascript.

Typescript overview
- Typescript detects errors in our code without running it. This is called static checking.
- It does this error checking on the basis of the "kinds of data" in our program again types.

Compiling
- more on the compiler and how it works.
- The name of the compiler for TS is the typescript compiler or (TSC)
- It compiles the typescript down into Javascript.

Why types?
- It helps us find errors.
- It analyzes our code as we types.
- Only exists in development.

What is type inference?
- Type inference refers to typescript compilers ability to infer types from certain values in your code
- Typescript can remember a values type even if you didn't provide a type annotation, and it will enforce that type moving forward.

Function parameter types
- This allows Typescript to enforece the types for the values being passed into your function.
- Typed params are just like typing variables.

Function return types
- We can specify the type returned by a function. Even though typescript can often infer this, it's prefereable to use explicit annotations.
- Add the type annotation after the function param list.

Anonymous function
- When typescript can infer how an unnamed function is going to be called, it can automatically infer its parameters types.
- for example [1,2,3].forEach((num)) typescript will automatically know that num is a "number" because of how and what it is called on.

The Never type
- The never type represents values that NEVER occur.
- We might use it to throw and exception, or a function that never finishes executing.
- With Never a function never finishes executing - not to be confused with VOID which retuirns null or undefined

Type alias
- Instead of writing out objects in an annotation, we can declare them seperately in a type alias, which is simply the desired shape of the objects
- This allows us to make our code more readable and even reuse the types elsewhere in our code.
- type Person = { name: strong, age: number };

Array types
- Arrays can be  typed like with - string[] number[] Person[]
- These arrays only allow data of that one type inside them.
-- Alternative array type syntax 
- Array<string> || Array<Number>

Unions
- Unions types allow us to give a value a few different possible types.
- The value is alowed to be this or that and typescript will enforce it.
- var age: number | string

Literal Types
- Literal types are not just types, but the values themselves too!
- Locks the user in to use certain answers or params.
- answer(answer: "yes" | "no" | "maybe")

Tuple
- Tuples are a special type exclusive to Typescript (they don't exists in JS)
- Tuples are arrays with a fixed length and order with specific types - like super rigid arrays. //
- let myTuple: [number, string, boolean];
- Tuples allow you to add in values after it has been approved as a Tuple is just an arrray and is more used for typing.

Enums
- Enums allow us to define a set of named constants. We can give these constants numberic and string values.
- There's quite a few options when it comes to enums.
- enum Reponse { no = "No", yes = "Yes" }
- Using "Const Enum" changes the way that the typescript gets compiled. What it does is that erazes all the existance of the enum from the reulting Javascript and
  replaces every value with the value behind the enum.